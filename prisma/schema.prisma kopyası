generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AddressType {
  Fatura
  Sevk
  Teslimat
}

enum InvoiceType {
  Purchase
  Sales
  Return
  Cancel
  Other
}

enum DocumentType {
  Invoice
  Order
  Waybill
  Other
}

enum StokManagementType {
  Sayim
  Devir
  DepolarArasiTransfer
  Uretim
  Muhtelif
  Maliyet
  Konsinye
  Teshir
  AlisFaturasi
  SatisFaturasi
  HizliSatis
}

enum GCCode {
  Giris
  Cikis
}

enum CurrentMovementType {
  Borc
  Alacak
}

enum CurrentMovementDocumentType {
  Devir
  Fatura
  IadeFatura
  Kasa
  MusteriSeneti
  BorcSeneti
  MusteriCeki
  BorcCeki
  KarsiliksizCek
  Muhtelif
}

enum CurrentPaymentType {
  CokluOdeme
  Kasa
  POS
  Banka
  Cek
  Senet
  Diger
}

enum ReceiptType {
  Devir
  Sayim
  Nakil
  Giris
  Cikis
  Fire
}

enum StockUnits {
  Adet
  Kg
  Lt
  M
  M2
  M3
  Paket
  Kutu
  Koli
  Ton
  Dolar
  Euro
  TL
}

enum ProductType {
  BasitUrun
  VaryasyonluUrun
  DijitalUrun
  Hizmet
  VaryasyonUrun
}

enum InstitutionType {
  Sirket
  Sahis
}

enum CurrentType {
  AliciSatici
  Alici
  Satici
  Personel
  SanalPazar
  Kurum
  AnaGrupSirketi
  Ithalat
  Ihracat
  IthalatIhracat
  Musteri
  Tedarikci
  Diger
}

enum VaultDirection {
  Introduction
  Exit
  ReceivedVirement
}

enum VaultType {
  DebtTransfer
  ServiceChargeCollection
  CompanyCreditCardWithdrawals
  BuyingForeignCurrency
  InputReceipt
  BankWithdrawals
  ReceivingValuableAssets
  ReceivableTransfer
  ServiceChargePayment
  CompanyCreditCardDeposit
  CurrencyExchange
  LoanPayment
  ExitReceipt
  PaymentToBank
  PreciousMetalExchange
  LoanWithdrawal
  ReceivedVirement
  OutgoingVirement
  InGoingVirement
  POSWithdrawals
  PurchaseInvoicePayment
  SalesInvoicePayment
  CashCollection
  BankCollection
  POSCollection
}

enum VaultDocumentType {
  General
  Accounting
  Official
}

enum StockTakeStatus {
  Draft
  InProgress
  Completed
  Cancelled
}

enum StockTakeType {
  Full
  Partial
  Spot
  Periodic
}

model Role {
  id            String       @id @default(cuid())
  roleName      String       @unique @db.VarChar(50)
  description   String       @db.VarChar(100)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String?
  updatedBy     String?
  createdByUser User?        @relation("RoleCreatedBy", fields: [createdBy], references: [username])
  updatedByUser User?        @relation("RoleUpdatedBy", fields: [updatedBy], references: [username])
  permissions   Permission[] @relation("PermissionToRole")
  users         User[]

  @@index([roleName])
}

model Permission {
  id             String           @id @default(uuid())
  permissionName String           @unique
  description    String?
  route          String?
  method         String?
  action         String?
  resource       String?
  groupId        String?
  group          PermissionGroup? @relation(fields: [groupId], references: [id])
  roles          Role[]           @relation("PermissionToRole")
  users          User[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([route])
  @@index([permissionName])
  @@index([resource, action])
}

model PermissionGroup {
  id          String       @id @default(cuid())
  groupName   String       @unique @db.VarChar(50)
  description String?      @db.VarChar(100)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]
}

model StockCard {
  id                      String                    @id @default(cuid())
  productCode             String                    @unique @db.VarChar(100)
  productName             String                    @db.VarChar(150)
  unit                    StockUnits                @default(Adet)
  shortDescription        String?                   @db.VarChar(150)
  description             String?                   @db.Text
  companyCode             String?                   @db.VarChar(50)
  branchCode              String?                   @db.VarChar(50)
  brandId                 String?                   @db.VarChar(100)
  productType             ProductType               @default(BasitUrun)
  kdv                     Decimal?                  @db.Decimal(15, 4)
  gtip                    String?                   @db.VarChar(50)
  pluCode                 String?                   @db.VarChar(50)
  desi                    Decimal?                  @db.Decimal(15, 4)
  adetBoleni              Decimal?                  @db.Decimal(15, 4)
  siraNo                  String?                   @db.VarChar(50)
  raf                     String?                   @db.VarChar(50)
  karMarji                Decimal?                  @db.Decimal(15, 4)
  riskQuantities          Decimal?                  @db.Decimal(15, 4)
  maliyet                 Decimal?                  @db.Decimal(15, 4)
  maliyetDoviz            String?                   @db.VarChar(3)
  stockStatus             Boolean                   @default(true)
  hasExpirationDate       Boolean                   @default(false)
  allowNegativeStock      Boolean                   @default(false)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  createdBy               String?
  updatedBy               String?
  invoiceDetail           InvoiceDetail[]
  orderItems              OrderItem[]
  receiptDetail           ReceiptDetail[]
  branch                  Branch?                   @relation(fields: [branchCode], references: [branchCode])
  brand                   Brand?                    @relation(fields: [brandId], references: [id])
  company                 Company?                  @relation(fields: [companyCode], references: [companyCode])
  createdByUser           User?                     @relation("StockCardCreatedBy", fields: [createdBy], references: [username])
  updatedByUser           User?                     @relation("StockCardUpdatedBy", fields: [updatedBy], references: [username])
  stockCardAttributeItems StockCardAttributeItems[]
  barcodes                StockCardBarcode[]
  stockCardCategoryItem   StockCardCategoryItem[]
  stockCardEFatura        StockCardEFatura[]
  stockCardManufacturer   StockCardManufacturer[]
  stockCardMarketNames    StockCardMarketNames[]
  stockCardPriceLists     StockCardPriceListItems[]
  taxRates                StockCardTaxRate[]
  variations              StockCardVariation[]
  stockCardWarehouse      StockCardWarehouse[]
  stockMovement           StockMovement[]
  Store                   Store[]                   @relation("StockCardToStore")
  ProductMatch            ProductMatch[]
  StockTakeDetail         StockTakeDetail[]

  PrintQueue PrintQueue[]
}

model StockCardEFatura {
  id          String   @id @default(cuid())
  productCode String   @unique @db.VarChar(100)
  productName String   @db.VarChar(150)
  stockCardId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  StockCard StockCard[]
}

model StockCardManufacturer {
  id          String    @id @default(cuid())
  productCode String    @db.VarChar(100)
  productName String    @db.VarChar(150)
  barcode     String    @unique @db.VarChar(100)
  brandId     String?   @db.VarChar(100)
  stockCardId String
  currentId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brand       Brand?    @relation(fields: [brandId], references: [id])
  current     Current   @relation(fields: [currentId], references: [id])
  stockCard   StockCard @relation(fields: [stockCardId], references: [id])
}

model Brand {
  id                    String                  @id @default(cuid())
  brandName             String                  @unique @db.VarChar(100)
  brandCode             String                  @unique @db.VarChar(50)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  createdByUser         User?                   @relation("BrandCreatedBy", fields: [createdBy], references: [username])
  updatedByUser         User?                   @relation("BrandUpdatedBy", fields: [updatedBy], references: [username])
  stockCard             StockCard[]
  stockCardManufacturer StockCardManufacturer[]
}

model StockCardPriceList {
  id                      String                    @id @default(cuid())
  priceListName           String                    @unique @db.VarChar(100)
  currency                String                    @db.VarChar(3)
  isVatIncluded           Boolean                   @default(true)
  isActive                Boolean                   @default(true)
  current                 Current[]
  currentMovement         CurrentMovement[]
  invoice                 Invoice[]
  stockCardPriceListItems StockCardPriceListItems[]
  stockMovement           StockMovement[]
}

model StockCardPriceListItems {
  id                 String               @id @default(cuid())
  priceListId        String
  stockCardId        String
  price              Decimal              @db.Decimal(15, 4)
  barcode            String?              @db.VarChar(100)
  vatRate            Decimal?             @db.Decimal(15, 4)
  priceList          StockCardPriceList   @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  stockCardVariation StockCardVariation[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model StockCardBarcode {
  id                 String               @id @default(cuid())
  stockCardId        String
  barcode            String               @unique @db.VarChar(100)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  stockCardVariation StockCardVariation[] @relation("StockCardBarcodeToStockCardVariation")
}

model StockCardMarketNames {
  id          String    @id @default(cuid())
  stockCardId String
  marketName  String    @db.VarChar(100)
  stockCard   StockCard @relation(fields: [stockCardId], references: [id])
}

model StockCardCategory {
  id               String                  @id @default(cuid())
  categoryName     String                  @unique @db.VarChar(100)
  categoryCode     String                  @unique @db.VarChar(100)
  parentCategoryId String?
  parentCategory   StockCardCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  StockCardCategory[]     @relation("CategoryHierarchy")
  categoryItems    StockCardCategoryItem[]
}

model StockCardCategoryItem {
  id                String            @id @default(cuid())
  stockCardId       String
  categoryId        String
  stockCardCategory StockCardCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stockCard         StockCard         @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardTaxRate {
  id          String     @id @default(cuid())
  stockCardId String?
  taxName     String     @db.VarChar(100)
  taxRate     Decimal    @db.Decimal(15, 4)
  stockCard   StockCard? @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardAttribute {
  id                      String                    @id @default(cuid())
  attributeName           String                    @db.VarChar(100)
  value                   String
  stockCardAttributeItems StockCardAttributeItems[]
}

model StockCardAttributeItems {
  id          String             @id @default(cuid())
  attributeId String
  stockCardId String
  attribute   StockCardAttribute @relation(fields: [attributeId], references: [id])
  stockCard   StockCard          @relation(fields: [stockCardId], references: [id])
}

model StockCardVariation {
  id                      String                    @id @default(cuid())
  stockCardId             String
  variationName           String                    @db.VarChar(100)
  variationCode           String                    @unique @db.VarChar(100)
  variationValue          String                    @db.VarChar(100)
  stockCard               StockCard                 @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  stockCardBarcode        StockCardBarcode[]        @relation("StockCardBarcodeToStockCardVariation")
  stockCardPriceListItems StockCardPriceListItems[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model StockMovement {
  id               String              @id @default(cuid())
  productCode      String
  warehouseCode    String
  branchCode       String
  currentCode      String?
  documentType     DocumentType?
  invoiceType      InvoiceType?
  movementType     StokManagementType
  documentNo       String?
  receiptNo        String?
  type             String?
  description      String?
  quantity         Decimal?            @db.Decimal(15, 4)
  unitPrice        Decimal?            @db.Decimal(15, 4)
  totalPrice       Decimal?            @db.Decimal(15, 4)
  unitOfMeasure    String?             @db.VarChar(50)
  outWarehouseCode String?
  priceListId      String?
  createdAt        DateTime            @default(now())
  createdBy        String?
  updatedAt        DateTime?           @updatedAt
  updatedBy        String?
  gcCode           GCCode?
  branch           Branch              @relation(fields: [branchCode], references: [branchCode])
  createdByUser    User?               @relation("StockMovementCreatedBy", fields: [createdBy], references: [username])
  current          Current?            @relation(fields: [currentCode], references: [currentCode])
  invoice          Invoice?            @relation(fields: [documentNo], references: [invoiceNo])
  receipt          Receipt?            @relation(fields: [receiptNo], references: [documentNo])
  outWarehouse     Warehouse?          @relation("StockMovementOutWarehouse", fields: [outWarehouseCode], references: [warehouseCode])
  priceList        StockCardPriceList? @relation(fields: [priceListId], references: [id])
  stockCard        StockCard           @relation(fields: [productCode], references: [productCode])
  updatedByUser    User?               @relation("StockMovementUpdatedBy", fields: [updatedBy], references: [username])
  warehouse        Warehouse           @relation("StockMovementWarehouse", fields: [warehouseCode], references: [warehouseCode])
}

model Company {
  id              String            @id @default(cuid())
  companyName     String            @unique @db.VarChar(100)
  name            String?           @db.VarChar(100)
  surname         String?           @db.VarChar(100)
  companyCode     String?           @unique @db.VarChar(50)
  taxNumber       String?           @unique @db.VarChar(50)
  taxOffice       String?           @db.VarChar(50)
  kepAddress      String?           @db.VarChar(50)
  mersisNo        String?           @db.VarChar(50)
  sicilNo         String?           @db.VarChar(50)
  address         String?           @db.VarChar(300)
  countryCode     String?           @db.VarChar(3)
  city            String?           @db.VarChar(50)
  district        String?           @db.VarChar(50)
  postalCode      String?           @db.VarChar(10)
  phone           String?           @db.VarChar(50)
  email           String?           @db.VarChar(100)
  website         String?           @db.VarChar(100)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  currentMovement CurrentMovement[]
  invoice         Invoice[]
  MarketPlace     MarketPlace[]
  stockCard       StockCard[]
  User            User[]
  warehouse       Warehouse[]
  Branch          Branch[]
}

model Branch {
  id              String            @id @default(cuid())
  branchName      String            @unique @db.VarChar(100)
  branchCode      String            @unique @db.VarChar(50)
  address         String            @db.VarChar(250)
  countryCode     String            @db.VarChar(3)
  city            String            @db.VarChar(50)
  district        String            @db.VarChar(50)
  phone           String            @db.VarChar(50)
  email           String            @db.VarChar(100)
  website         String            @db.VarChar(100)
  companyCode     String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       String?
  updatedBy       String?
  Bank            Bank[]
  company         Company           @relation(fields: [companyCode], references: [companyCode])
  createdByUser   User?             @relation("BranchCreatedBy", fields: [createdBy], references: [username])
  updatedByUser   User?             @relation("BranchUpdatedBy", fields: [updatedBy], references: [username])
  warehouse       BranchWarehouse[]
  currentBranch   CurrentBranch[]
  currentMovement CurrentMovement[]
  outInvoice      Invoice[]         @relation("InvoiceBranch")
  invoice         Invoice[]         @relation("InvoiceOutBranch")
  Pos             Pos[]
  receipt         Receipt[]
  stockCard       StockCard[]
  stockMovement   StockMovement[]
  vault           Vault[]
  StockTake       StockTake[]
}

model Warehouse {
  id                    String                  @id @default(cuid())
  warehouseName         String                  @unique @db.VarChar(100)
  warehouseCode         String                  @unique @db.VarChar(50)
  address               String                  @db.VarChar(250)
  countryCode           String                  @db.VarChar(3)
  city                  String                  @db.VarChar(50)
  district              String                  @db.VarChar(50)
  phone                 String                  @db.VarChar(50)
  email                 String                  @db.VarChar(100)
  companyCode           String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  branch                BranchWarehouse[]
  invoice               Invoice[]
  inReceipt             Receipt[]               @relation("ReceiptInWarehouse")
  outReceipt            Receipt[]               @relation("ReceiptOutWarehouse")
  stockCardWarehouse    StockCardWarehouse[]
  outMovements          StockMovement[]         @relation("StockMovementOutWarehouse")
  stockMovements        StockMovement[]         @relation("StockMovementWarehouse")
  StockTake             StockTake[]
  OrderPrepareWarehouse OrderPrepareWarehouse[]
  company               Company                 @relation(fields: [companyCode], references: [companyCode])
  createdByUser         User?                   @relation("WarehouseCreatedBy", fields: [createdBy], references: [username])
  updatedByUser         User?                   @relation("WarehouseUpdatedBy", fields: [updatedBy], references: [username])
}

model BranchWarehouse {
  id          String    @id @default(cuid())
  branchId    String
  warehouseId String
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([branchId, warehouseId])
}

model StockCardWarehouse {
  id          String    @id @default(cuid())
  stockCardId String
  warehouseId String
  quantity    Decimal   @db.Decimal(15, 4)
  stockCard   StockCard @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([stockCardId, warehouseId])
}

model StockTake {
  id            String          @id @default(cuid())
  documentNo    String          @unique @db.VarChar(50)
  warehouseId   String
  branchCode    String
  stockTakeType StockTakeType   @default(Full)
  status        StockTakeStatus @default(Draft)
  description   String?
  reference     String?         @db.VarChar(100)
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdBy     String?
  updatedBy     String?

  warehouse     Warehouse         @relation(fields: [warehouseId], references: [id])
  branch        Branch            @relation(fields: [branchCode], references: [branchCode])
  createdByUser User?             @relation("StockTakeCreatedBy", fields: [createdBy], references: [username])
  updatedByUser User?             @relation("StockTakeUpdatedBy", fields: [updatedBy], references: [username])
  details       StockTakeDetail[]
}

model StockTakeDetail {
  id          String  @id @default(cuid())
  stockTakeId String
  stockCardId String
  quantity    Decimal @db.Decimal(15, 4)
  difference  Decimal @db.Decimal(15, 4)
  note        String?

  stockTake StockTake @relation(fields: [stockTakeId], references: [id])
  stockCard StockCard @relation(fields: [stockCardId], references: [id])
}

model Receipt {
  id                  String           @id @default(cuid())
  receiptType         ReceiptType
  receiptDate         DateTime         @default(now())
  documentNo          String           @unique @db.VarChar(50)
  branchCode          String           @db.VarChar(50)
  isTransfer          Boolean          @default(false)
  outWarehouse        String?
  inWarehouse         String?
  description         String?
  createdBy           String?
  updatedBy           String?
  createdAt           DateTime         @default(now())
  currentId           String?
  currentMovementId   String?
  current             Current?         @relation(fields: [currentId], references: [id])
  currentMovement     CurrentMovement? @relation(fields: [currentMovementId], references: [id])
  BankMovement        BankMovement[]
  PosMovement         PosMovement[]
  branch              Branch           @relation(fields: [branchCode], references: [branchCode])
  createdByUser       User?            @relation("ReceiptCreatedBy", fields: [createdBy], references: [username])
  inReceiptWarehouse  Warehouse?       @relation("ReceiptInWarehouse", fields: [inWarehouse], references: [warehouseCode])
  outReceiptWarehouse Warehouse?       @relation("ReceiptOutWarehouse", fields: [outWarehouse], references: [warehouseCode])
  updatedByUser       User?            @relation("ReceiptUpdatedBy", fields: [updatedBy], references: [username])
  receiptDetail       ReceiptDetail[]
  vaultMovement       VaultMovement[]

  StockMovement StockMovement[]
}

model ReceiptDetail {
  id          String    @id @default(cuid())
  receiptId   String
  stockCardId String
  quantity    Decimal   @db.Decimal(15, 4)
  unitPrice   Decimal   @db.Decimal(15, 4)
  totalPrice  Decimal   @db.Decimal(15, 4)
  vatRate     Decimal   @db.Decimal(15, 4)
  discount    Decimal   @db.Decimal(15, 4)
  netPrice    Decimal   @db.Decimal(15, 4)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  receipt     Receipt   @relation(fields: [receiptId], references: [id])
  stockCard   StockCard @relation(fields: [stockCardId], references: [id])
}

model Current {
  id                    String                  @id @default(cuid())
  currentCode           String                  @unique @db.VarChar(50)
  currentName           String                  @db.VarChar(100)
  currentType           CurrentType             @default(AliciSatici)
  institution           InstitutionType         @default(Sahis)
  identityNo            String?                 @db.VarChar(50)
  taxNumber             String?                 @db.VarChar(50)
  taxOffice             String?                 @db.VarChar(50)
  title                 String?                 @db.VarChar(100)
  name                  String?                 @db.VarChar(50)
  surname               String?                 @db.VarChar(50)
  webSite               String?                 @db.VarChar(100)
  birthOfDate           DateTime?
  kepAddress            String?                 @db.VarChar(50)
  mersisNo              String?                 @db.VarChar(50)
  sicilNo               String?                 @db.VarChar(50)
  priceListId           String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  createdBy             String?
  updatedBy             String?
  createdByUser         User?                   @relation("CurrentCreatedBy", fields: [createdBy], references: [username])
  priceList             StockCardPriceList      @relation(fields: [priceListId], references: [id])
  updatedByUser         User?                   @relation("CurrentUpdatedBy", fields: [updatedBy], references: [username])
  currentAddress        CurrentAddress[]
  currentBranch         CurrentBranch[]
  currentCategoryItem   CurrentCategoryItem[]
  currentFinancial      CurrentFinancial[]
  currentMovement       CurrentMovement[]
  currentOfficials      CurrentOfficials[]
  currentRisk           CurrentRisk?
  invoice               Invoice[]
  stockCardManufacturer StockCardManufacturer[]
  stockMovement         StockMovement[]

  OrderPrepareWarehouse OrderPrepareWarehouse[]

  Receipt Receipt[]
}

model CurrentBranch {
  id          String   @id @default(cuid())
  currentCode String   @db.VarChar(50)
  branchCode  String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  branch      Branch   @relation(fields: [branchCode], references: [branchCode])
  current     Current  @relation(fields: [currentCode], references: [currentCode])
}

model CurrentAddress {
  id          String      @id @default(cuid())
  currentCode String      @db.VarChar(50)
  addressName String      @db.VarChar(50)
  addressType AddressType @default(Fatura)
  address     String      @db.VarChar(250)
  countryCode String      @db.VarChar(3)
  city        String      @db.VarChar(50)
  district    String      @db.VarChar(50)
  postalCode  String      @db.VarChar(10)
  phone       String      @db.VarChar(50)
  phone2      String      @db.VarChar(50)
  email       String      @db.VarChar(100)
  email2      String      @db.VarChar(100)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  current     Current     @relation(fields: [currentCode], references: [currentCode])
}

model CurrentFinancial {
  id             String   @id @default(cuid())
  currentCode    String   @db.VarChar(50)
  bankName       String   @db.VarChar(50)
  bankBranch     String   @db.VarChar(50)
  bankBranchCode String   @db.VarChar(50)
  iban           String   @db.VarChar(100)
  accountNo      Decimal? @db.Decimal(15, 4)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  current        Current  @relation(fields: [currentCode], references: [currentCode])
}

model CurrentRisk {
  id                       String   @id @default(cuid())
  currentCode              String   @unique @db.VarChar(50)
  currency                 String   @db.VarChar(3)
  teminatYerelTutar        Decimal? @db.Decimal(15, 4)
  acikHesapYerelLimit      Decimal? @db.Decimal(15, 4)
  hesapKesimGunu           Int?
  vadeGun                  Int?
  gecikmeLimitGunu         Int?
  varsayilanAlisIskontosu  Decimal? @db.Decimal(15, 4)
  varsayilanSatisIskontosu Decimal? @db.Decimal(15, 4)
  ekstreGonder             Boolean? @default(false)
  limitKontrol             Boolean? @default(false)
  acikHesap                Boolean? @default(false)
  posKullanim              Boolean? @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  current                  Current  @relation(fields: [currentCode], references: [currentCode])
}

model CurrentOfficials {
  id          String   @id @default(cuid())
  currentCode String   @db.VarChar(50)
  title       String   @db.VarChar(100)
  name        String   @db.VarChar(50)
  surname     String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  email       String   @db.VarChar(100)
  note        String   @db.VarChar(250)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  current     Current  @relation(fields: [currentCode], references: [currentCode])
}

model CurrentMovement {
  id                 String                       @id @default(cuid())
  currentCode        String?                      @db.VarChar(50)
  dueDate            DateTime?
  description        String?                      @db.VarChar(250)
  debtAmount         Decimal?                     @db.Decimal(15, 4)
  creditAmount       Decimal?                     @db.Decimal(15, 4)
  priceListId        String?
  movementType       CurrentMovementType
  documentType       CurrentMovementDocumentType?
  documentNo         String?
  companyCode        String
  branchCode         String
  createdAt          DateTime                     @default(now())
  updatedAt          DateTime                     @updatedAt
  createdBy          String?
  updatedBy          String?
  paymentType        CurrentPaymentType?
  branch             Branch                       @relation(fields: [branchCode], references: [branchCode])
  company            Company                      @relation(fields: [companyCode], references: [companyCode])
  createdByUser      User?                        @relation("CurrentMovementCreatedBy", fields: [createdBy], references: [username])
  current            Current?                     @relation(fields: [currentCode], references: [currentCode])
  invoice            Invoice?                     @relation(fields: [documentNo], references: [invoiceNo])
  stockCardPriceList StockCardPriceList?          @relation(fields: [priceListId], references: [id])
  updatedByUser      User?                        @relation("CurrentMovementUpdatedBy", fields: [updatedBy], references: [username])

  VaultMovement         VaultMovement[]
  BankMovement          BankMovement[]
  PosMovement           PosMovement[]
  OrderPrepareWarehouse OrderPrepareWarehouse[]
  Receipt               Receipt[]
}

model CurrentCategory {
  id               String                @id @default(cuid())
  categoryName     String                @db.VarChar(100)
  categoryCode     String                @unique @db.VarChar(100)
  parentCategoryId String?
  parentCategory   CurrentCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  CurrentCategory[]     @relation("CategoryHierarchy")
  categoryItems    CurrentCategoryItem[]
}

model CurrentCategoryItem {
  id          String          @id @default(cuid())
  currentCode String          @db.VarChar(50)
  categoryId  String
  category    CurrentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  current     Current         @relation(fields: [currentCode], references: [currentCode], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  username            String    @unique @db.VarChar(50)
  password            String    @db.VarChar(100)
  email               String    @unique @db.VarChar(100)
  firstName           String    @db.VarChar(50)
  lastName            String    @db.VarChar(50)
  phone               String    @db.VarChar(50)
  address             String    @db.VarChar(250)
  isActive            Boolean   @default(true)
  companyCode         String?
  failedLoginAttempts Int       @default(0)
  lastFailedLoginAt   DateTime?
  lockedUntil         DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  createdBy           String?
  updatedBy           String?

  company Company? @relation(fields: [companyCode], references: [companyCode])

  role                           Role[]
  permission                     Permission[]
  createdByBank                  Bank[]                  @relation("BankCreatedBy")
  updatedByBank                  Bank[]                  @relation("BankUpdatedBy")
  createdByBankMovement          BankMovement[]          @relation("BankMovementCreatedBy")
  updatedByBankMovement          BankMovement[]          @relation("BankMovementUpdatedBy")
  createdByBranch                Branch[]                @relation("BranchCreatedBy")
  updatedByBranch                Branch[]                @relation("BranchUpdatedBy")
  createdByBrand                 Brand[]                 @relation("BrandCreatedBy")
  updatedByBrand                 Brand[]                 @relation("BrandUpdatedBy")
  createdByCurrent               Current[]               @relation("CurrentCreatedBy")
  updatedByCurrent               Current[]               @relation("CurrentUpdatedBy")
  createdByCurrentMovement       CurrentMovement[]       @relation("CurrentMovementCreatedBy")
  updatedByCurrentMovement       CurrentMovement[]       @relation("CurrentMovementUpdatedBy")
  createdByInvoice               Invoice[]               @relation("InvoiceCreatedBy")
  updatedByInvoice               Invoice[]               @relation("InvoiceUpdatedBy")
  createdByMarketPlace           MarketPlace[]           @relation("MarketPlaceCreatedBy")
  updatedByMarketPlace           MarketPlace[]           @relation("MarketPlaceUpdatedBy")
  Notification                   Notification[]
  createdByPos                   Pos[]                   @relation("PosCreatedBy")
  updatedByPos                   Pos[]                   @relation("PosUpdatedBy")
  createdByPosMovement           PosMovement[]           @relation("PosMovementCreatedBy")
  updatedByPosMovement           PosMovement[]           @relation("PosMovementUpdatedBy")
  createdByReceipt               Receipt[]               @relation("ReceiptCreatedBy")
  updatedByReceipt               Receipt[]               @relation("ReceiptUpdatedBy")
  createdByRoles                 Role[]                  @relation("RoleCreatedBy")
  updatedByRoles                 Role[]                  @relation("RoleUpdatedBy")
  createdByStockCard             StockCard[]             @relation("StockCardCreatedBy")
  updatedByStockCard             StockCard[]             @relation("StockCardUpdatedBy")
  createdByStockMovement         StockMovement[]         @relation("StockMovementCreatedBy")
  updatedByStockMovement         StockMovement[]         @relation("StockMovementUpdatedBy")
  createdByStore                 Store[]                 @relation("StoreCreatedBy")
  updatedByStore                 Store[]                 @relation("StoreUpdatedBy")
  createdByVault                 Vault[]                 @relation("VaultCreatedBy")
  updatedByVault                 Vault[]                 @relation("VaultUpdatedBy")
  createdByVaultMovement         VaultMovement[]         @relation("VaultMovementCreatedBy")
  updatedByVaultMovement         VaultMovement[]         @relation("VaultMovementUpdatedBy")
  createdByWarehouse             Warehouse[]             @relation("WarehouseCreatedBy")
  updatedByWarehouse             Warehouse[]             @relation("WarehouseUpdatedBy")
  createdByOrderPrepareWarehouse OrderPrepareWarehouse[] @relation("OrderPrepareWarehouseCreatedBy")
  updatedByOrderPrepareWarehouse OrderPrepareWarehouse[] @relation("OrderPrepareWarehouseUpdatedBy")
  createdByStockTake             StockTake[]             @relation("StockTakeCreatedBy")
  updatedByStockTake             StockTake[]             @relation("StockTakeUpdatedBy")

  PrintQueue        PrintQueue[]  @relation("PrintQueuePrintedBy")
  sessions          Session[]
  securityLogs      SecurityLog[]
  adminSecurityLogs SecurityLog[] @relation("AdminSecurityLogs")
}

model Session {
  id               String   @id @default(uuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  refreshToken     String   @db.Text
  deviceInfo       String?
  ipAddress        String?
  lastActivity     DateTime @default(now())
  isActive         Boolean  @default(true)
  expiresAt        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isSuspicious     Boolean  @default(false)
  suspiciousReason String?
  location         String?
  userAgent        String?
  browser          String?
  os               String?
  device           String?
  rememberMe       Boolean  @default(false)

  @@index([userId])
  @@index([refreshToken])
  @@index([isSuspicious])
}

model Invoice {
  id                String              @id @default(cuid())
  invoiceNo         String              @unique @db.VarChar(50)
  gibInvoiceNo      String?
  invoiceDate       DateTime?
  invoiceType       InvoiceType?
  documentType      DocumentType?
  currentCode       String?
  companyCode       String?
  branchCode        String
  outBranchCode     String?
  warehouseCode     String
  description       String?
  genelIskontoTutar Decimal?            @db.Decimal(15, 4)
  genelIskontoOran  Decimal?            @db.Decimal(15, 4)
  paymentDate       DateTime?
  paymentDay        Int?
  priceListId       String?
  totalAmount       Decimal?            @db.Decimal(15, 4)
  totalVat          Decimal?            @db.Decimal(15, 4)
  totalDiscount     Decimal?            @db.Decimal(15, 4)
  totalNet          Decimal?            @db.Decimal(15, 4)
  totalPaid         Decimal?            @db.Decimal(15, 4)
  totalDebt         Decimal?            @db.Decimal(15, 4)
  totalBalance      Decimal?            @db.Decimal(15, 4)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  canceledAt        DateTime?
  createdBy         String?
  updatedBy         String?
  BankMovement      BankMovement[]
  currentMovement   CurrentMovement[]
  branch            Branch              @relation("InvoiceBranch", fields: [branchCode], references: [branchCode])
  company           Company?            @relation(fields: [companyCode], references: [companyCode])
  createdByUser     User?               @relation("InvoiceCreatedBy", fields: [createdBy], references: [username])
  current           Current?            @relation(fields: [currentCode], references: [currentCode])
  outBranch         Branch?             @relation("InvoiceOutBranch", fields: [outBranchCode], references: [branchCode])
  priceList         StockCardPriceList? @relation(fields: [priceListId], references: [id])
  updatedByUser     User?               @relation("InvoiceUpdatedBy", fields: [updatedBy], references: [username])
  warehouse         Warehouse           @relation(fields: [warehouseCode], references: [warehouseCode])
  invoiceDetail     InvoiceDetail[]
  PosMovement       PosMovement[]
  stockMovement     StockMovement[]
  vaultMovement     VaultMovement[]
}

model InvoiceDetail {
  id          String     @id @default(cuid())
  invoiceId   String
  productCode String?
  costCode    String?
  costName    String?
  currency    String?
  quantity    Decimal?   @db.Decimal(15, 4)
  unitPrice   Decimal?   @db.Decimal(15, 4)
  totalPrice  Decimal?   @db.Decimal(15, 4)
  vatRate     Decimal?   @db.Decimal(15, 4)
  discount    Decimal?   @db.Decimal(15, 4)
  netPrice    Decimal?   @db.Decimal(15, 4)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  invoice     Invoice    @relation(fields: [invoiceId], references: [id])
  stockCard   StockCard? @relation(fields: [productCode], references: [productCode])
}

model Vault {
  id            String          @id @default(cuid())
  vaultName     String          @db.VarChar(50)
  branchCode    String
  balance       Decimal         @db.Decimal(15, 2)
  currency      String
  createdBy     String?
  updatedBy     String?
  branch        Branch          @relation(fields: [branchCode], references: [branchCode])
  createdByUser User?           @relation("VaultCreatedBy", fields: [createdBy], references: [username])
  updatedByUser User?           @relation("VaultUpdatedBy", fields: [updatedBy], references: [username])
  vaultMovement VaultMovement[]
}

model VaultMovement {
  id                String            @id @default(cuid())
  vaultId           String
  invoiceId         String?
  receiptId         String?
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  vaultDirection    VaultDirection
  vaultType         VaultType
  vaultDocumentType VaultDocumentType
  createdBy         String?
  updatedBy         String?
  createdByUser     User?             @relation("VaultMovementCreatedBy", fields: [createdBy], references: [username])
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  receipt           Receipt?          @relation(fields: [receiptId], references: [id])
  updatedByUser     User?             @relation("VaultMovementUpdatedBy", fields: [updatedBy], references: [username])
  vault             Vault             @relation(fields: [vaultId], references: [id])

  currentMovementId String?
  currentMovement   CurrentMovement? @relation(fields: [currentMovementId], references: [id])
}

model Bank {
  id            String         @id @default(cuid())
  bankName      String         @db.VarChar(50)
  branchCode    String
  balance       Decimal        @db.Decimal(15, 2)
  currency      String
  createdBy     String?
  updatedBy     String?
  branch        Branch         @relation(fields: [branchCode], references: [branchCode])
  createdByUser User?          @relation("BankCreatedBy", fields: [createdBy], references: [username])
  updatedByUser User?          @relation("BankUpdatedBy", fields: [updatedBy], references: [username])
  bankMovement  BankMovement[]
}

model BankMovement {
  id                String            @id @default(cuid())
  bankId            String
  invoiceId         String?
  receiptId         String?
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  bankDirection     VaultDirection
  bankType          VaultType
  bankDocumentType  VaultDocumentType
  currentMovementId String?
  createdBy         String?
  updatedBy         String?
  bank              Bank              @relation(fields: [bankId], references: [id])
  createdByUser     User?             @relation("BankMovementCreatedBy", fields: [createdBy], references: [username])
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  receipt           Receipt?          @relation(fields: [receiptId], references: [id])
  updatedByUser     User?             @relation("BankMovementUpdatedBy", fields: [updatedBy], references: [username])
  currentMovement   CurrentMovement?  @relation(fields: [currentMovementId], references: [id])
}

model Pos {
  id            String        @id @default(cuid())
  posName       String        @db.VarChar(50)
  branchCode    String
  balance       Decimal       @db.Decimal(15, 2)
  currency      String
  createdBy     String?
  updatedBy     String?
  branch        Branch        @relation(fields: [branchCode], references: [branchCode])
  createdByUser User?         @relation("PosCreatedBy", fields: [createdBy], references: [username])
  updatedByUser User?         @relation("PosUpdatedBy", fields: [updatedBy], references: [username])
  posMovement   PosMovement[]
}

model PosMovement {
  id                String            @id @default(cuid())
  posId             String
  invoiceId         String?
  receiptId         String?
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  posDirection      VaultDirection
  posType           VaultType
  posDocumentType   VaultDocumentType
  currentMovementId String?
  createdBy         String?
  updatedBy         String?
  createdByUser     User?             @relation("PosMovementCreatedBy", fields: [createdBy], references: [username])
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  pos               Pos               @relation(fields: [posId], references: [id])
  receipt           Receipt?          @relation(fields: [receiptId], references: [id])
  updatedByUser     User?             @relation("PosMovementUpdatedBy", fields: [updatedBy], references: [username])
  currentMovement   CurrentMovement?  @relation(fields: [currentMovementId], references: [id])
}

model Order {
  id                String               @id @default(cuid())
  platformOrderId   String
  platform          String
  customerId        String
  status            String
  currency          String
  orderDate         DateTime
  deliveryType      String?
  cargoCompany      String?
  shippingAddressId String?
  timeSlot          DateTime?
  totalPrice        Float
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  billingAddressId  String?
  isInvoiceCreated  Boolean              @default(false)
  storeId           String
  billingAddress    OrderInvoiceAddress? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   OrderInvoiceAddress? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  store             Store                @relation(fields: [storeId], references: [id])
  cargos            OrderCargo[]
  items             OrderItem[]
}

model OrderInvoiceAddress {
  id             String   @id @default(uuid())
  address        String
  city           String
  district       String
  postalCode     String
  country        String
  fullName       String
  email          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  paymentMethod  String?
  transactionId  String?
  billingOrders  Order[]  @relation("BillingAddress")
  shippingOrders Order[]  @relation("ShippingAddress")
}

model OrderCargo {
  id             String    @id @default(uuid())
  name           String
  shortName      String
  trackingNumber String
  orderId        String
  deliveredAt    DateTime?
  deliveryNote   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  order          Order     @relation(fields: [orderId], references: [id])
}

model OrderItem {
  id          String     @id @default(cuid())
  orderId     String
  stockCardId String?
  quantity    Int
  unitPrice   Decimal    @db.Decimal(15, 4)
  totalPrice  Decimal    @db.Decimal(15, 4)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  order       Order      @relation(fields: [orderId], references: [id])
  stockCard   StockCard? @relation(fields: [stockCardId], references: [id])
}

model MarketPlace {
  id                    String                  @id @default(cuid())
  name                  String
  apiBaseUrl            String
  logoUrl               String
  companyCode           String?
  createdBy             String?
  updatedBy             String?
  company               Company?                @relation(fields: [companyCode], references: [companyCode])
  createdByUser         User?                   @relation("MarketPlaceCreatedBy", fields: [createdBy], references: [username])
  updatedByUser         User?                   @relation("MarketPlaceUpdatedBy", fields: [updatedBy], references: [username])
  MarketPlaceAttributes MarketPlaceAttributes[]
  Store                 Store[]
}

model Store {
  id                      String                    @id @default(cuid())
  name                    String
  marketPlaceId           String
  apiCredentials          String
  autoInvoiceCreation     Boolean                   @default(false)
  storeUrl                String?
  createdBy               String?
  updatedBy               String?
  MarketPlaceProductMatch MarketPlaceProductMatch[]
  MarketPlaceProducts     MarketPlaceProducts[]
  order                   Order[]
  createdByUser           User?                     @relation("StoreCreatedBy", fields: [createdBy], references: [username])
  marketPlace             MarketPlace               @relation(fields: [marketPlaceId], references: [id])
  updatedByUser           User?                     @relation("StoreUpdatedBy", fields: [updatedBy], references: [username])
  stockcard               StockCard[]               @relation("StockCardToStore")
}

model MarketPlaceCategories {
  id                          String                @id @default(cuid())
  categoryName                String?
  marketPlaceCategoryId       String?
  marketPlaceCategoryParentId String?
  products                    MarketPlaceProducts[] @relation("ProductsOnCategories")

  // Alt ve üst kategori ilişkileri
  subCategories  MarketPlaceCategories[] @relation("CategoryParent")
  parentCategory MarketPlaceCategories?  @relation("CategoryParent", fields: [marketPlaceCategoryParentId], references: [id])
}

model MarketPlaceBrands {
  id                  String                @id @default(cuid())
  marketPlaceBrandId  String?
  brandName           String?
  MarketPlaceProducts MarketPlaceProducts[]
}

model MarketPlaceAttributes {
  id                      String                @id @default(cuid())
  marketPlaceId           String?
  MarketPlaceCategoriesId String?
  attributeName           String?
  attributeMarketPlaceId  String?
  valueName               String?
  valueMarketPlaceId      String?
  required                Boolean?
  allowCustom             Boolean?
  marketPlace             MarketPlace?          @relation(fields: [marketPlaceId], references: [id], onDelete: Cascade)
  MarketPlaceProducts     MarketPlaceProducts[] @relation("MarketPlaceAttributesToMarketPlaceProducts")
}

model MarketPlaceProductImages {
  id                   String               @id @default(cuid())
  imageUrl             String?
  marketPlaceProductId String?
  marketPlaceProducts  MarketPlaceProducts? @relation(fields: [marketPlaceProductId], references: [id], onDelete: Cascade)
}

model MarketPlaceProducts {
  id                       String                     @id @default(cuid())
  productName              String?
  productSku               String?
  description              String?
  shortDescription         String?
  listPrice                Decimal?                   @db.Decimal(15, 4)
  salePrice                Decimal?                   @db.Decimal(15, 4)
  barcode                  String?                    @unique
  storeId                  String?
  marketPlaceAttributesId  String?
  marketPlaceCategoriesId  String?
  marketPlaceBrandsId      String?
  productId                String?
  parentProductId          String?
  productType              String?
  MarketPlaceProductImages MarketPlaceProductImages[]
  MarketPlaceProductMatch  MarketPlaceProductMatch[]
  marketPlaceBrands        MarketPlaceBrands?         @relation(fields: [marketPlaceBrandsId], references: [id])
  parentProduct            MarketPlaceProducts?       @relation("ParentChildRelation", fields: [parentProductId], references: [id])
  childrenProducts         MarketPlaceProducts[]      @relation("ParentChildRelation")
  store                    Store?                     @relation(fields: [storeId], references: [id])
  marketPlaceAttributes    MarketPlaceAttributes[]    @relation("MarketPlaceAttributesToMarketPlaceProducts")
  MarketPlaceCategories    MarketPlaceCategories[]    @relation("ProductsOnCategories")
}

model MarketPlaceProductMatch {
  id                   String               @id @default(cuid())
  storeId              String?
  marketPlaceProductId String?
  platformProductId    String?
  platformVariationId  String?
  marketPlaceSKU       String?
  marketPlaceProducts  MarketPlaceProducts? @relation(fields: [marketPlaceProductId], references: [id])
  store                Store?               @relation(fields: [storeId], references: [id])
}

model Notification {
  id        String    @id @default(cuid())
  title     String
  message   String
  type      String
  severity  String
  read      Boolean   @default(false)
  readAt    DateTime?
  readBy    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User?     @relation(fields: [readBy], references: [username])
}

model ProductMatch {
  id          String  @id @default(cuid())
  productCode String?
  barcode     String? @unique

  product StockCard? @relation(fields: [productCode], references: [productCode])
}

model SentRequests {
  id             String  @id @default(cuid())
  url            String
  storeId        String?
  body           String
  batchRequestId String?

  requestResponses RequestResponses[]
}

model RequestResponses {
  id                 String  @id @default(cuid())
  sentRequestId      String?
  batchRequestResult String

  sentRequest SentRequests? @relation(fields: [sentRequestId], references: [id])
}

model OrderPrepareWarehouse {
  id                String           @id @default(cuid())
  status            String           @default("Completed")
  warehouseId       String
  warehouse         Warehouse        @relation(fields: [warehouseId], references: [id])
  currentId         String?
  current           Current?         @relation(fields: [currentId], references: [id])
  currentMovementId String?
  currentMovement   CurrentMovement? @relation(fields: [currentMovementId], references: [id])
  createdBy         String?
  createdByUser     User?            @relation("OrderPrepareWarehouseCreatedBy", fields: [createdBy], references: [username])
  updatedBy         String?
  updatedByUser     User?            @relation("OrderPrepareWarehouseUpdatedBy", fields: [updatedBy], references: [username])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model PrintQueue {
  id            String    @id @default(cuid())
  productCode   String
  stockCard     StockCard @relation(fields: [productCode], references: [productCode])
  quantity      Int
  status        String    @default("PENDING")
  printedAt     DateTime?
  printedBy     String?
  printedByUser User?     @relation("PrintQueuePrintedBy", fields: [printedBy], references: [username])
  printerName   String?
  errorMessage  String?
  retryCount    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status])
}

model SecurityLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  adminId     String?
  admin       User?    @relation("AdminSecurityLogs", fields: [adminId], references: [id])
  action      String
  description String
  timestamp   DateTime @default(now())

  @@index([userId])
  @@index([adminId])
  @@index([action])
}

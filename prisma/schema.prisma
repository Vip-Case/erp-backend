generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator prismabox {
  provider = "prismabox"
  typeboxImportVariableName = "t"
  typeboxImportDependencyName = "elysia"
  inputModel = true
  additionalProperties = true
}

enum CurrentType {
  Customer
  Supplier
  Manufacturer
  Buyer
  Seller
  Other
}

enum InvoiceType {
  Purchase
  Sales
  Return
  Cancel
  Other
}

enum DocumentType {
  Invoice
  Order
  Waybill
  Other
}

enum StokManagementType {
  Devir
  DepolarArasiTransfer
  Uretim
  Muhtelif
  Maliyet
  Konsinye
  Teshir
}

enum CurrentMovementType {
  Borc
  Alacak
}

enum CurrentMovementDocumentType {
  Devir
  Fatura
  IadeFatura
  Kasa
  MusteriSeneti
  BorcSeneti
  MusteriCeki
  BorcCeki
  KarsiliksizCek
  Muhtelif
}

enum ReceiptType {
  Devir
  Sayim
  Nakil
  Giris
  Cikis
  Fire
}

model Role {
  id          String   @id @default(cuid())
  roleName    String   @unique @db.VarChar(50)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  User User[]
}

model StockCard {
  id                 String   @id @default(cuid()) // Id
  productCode        String   @unique @db.VarChar(100) // Ürün Kodu
  productName        String   @db.VarChar(150) // Ürün Adı
  invoiceName        String?  @db.VarChar(150) // Fatura Adı
  shortDescription   String?  @db.VarChar(150) // Kısa Açıklama
  description        String?  @unique @db.VarChar(250) // Açıklama
  manufacturerCode   String?  @db.VarChar(50) // Üretici Kodu (ürünün üreticideki kodu)
  companyCode        String?  @db.VarChar(50) // Şirket Kodu
  branchCode         String?  @db.VarChar(50) // Şube Kodu
  brand              String?  @db.VarChar(100) // Marka
  unitOfMeasure      String?  @db.VarChar(50) // Ölçü Birimi
  productType        String   @db.VarChar(50) // Ürün Tipi
  marketNames        String?  @db.VarChar(250) // Piyasa Adları
  riskQuantities     Decimal? @db.Decimal(15, 4) // Risk Miktarı
  stockStatus        Boolean  @default(true) // Stok Durumu
  hasExpirationDate  Boolean  @default(false) // Son Kullanma Tarihi Var mı?
  allowNegativeStock Boolean  @default(false) // Negatif Stok İzinli mi?
  createdAt          DateTime @default(now()) // Oluşturulma Tarihi 
  updatedAt          DateTime @updatedAt // Güncellenme Tarihi
  createdBy          String? // Oluşturan
  updatedBy          String? // Güncelleyen

  Company   Company?    @relation(fields: [companyCode], references: [companyCode])
  Branch    Branch?     @relation(fields: [branchCode], references: [branchCode])
  

  Attributes          StockCardAttribute[] // Özellikler
  Barcodes            StockCardBarcode[] // Barkodlar
  Categories          StockCardCategoryItem[] // Kategoriler 
  StockCardPriceLists StockCardPriceListItems[] // Fiyat Listeleri
  TaxRates            StockCardTaxRate[] // Vergi Oranları
  Variations          StockCardVariation[] // Varyasyonlar
  StockMovement StockMovement[]
  InvoiceDetail InvoiceDetail[]
  StockCardWarehouse StockCardWarehouse[]
  ProfitMargin ProfitMargin[]
  ReceiptDetail ReceiptDetail[]
}

model StockCardPriceList {
  id            String  @id @default(cuid())
  priceListName String  @db.VarChar(100)
  currency      String  @db.VarChar(3)
  isActive      Boolean @default(true)

  Current Current[]

  StockMovement StockMovement[]

  CurrentMovement CurrentMovement[]

  Invoice Invoice[]
}

model StockCardPriceListItems {
  id                 String               @id @default(cuid())
  priceListId        String
  stockCardId        String
  price              Decimal              @db.Decimal(15, 4)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  StockCardVariation StockCardVariation[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model ProfitMargin {
  id          String   @id @default(cuid()) // Id
  stockCardId String   // İlgili Stok Kartı
  branchCode    String?   // İlgili Şube (isteğe bağlı)
  profitMargin Decimal  @db.Decimal(5, 2) // Kar Marjı (%)
  createdAt    DateTime  @default(now())  // Oluşturulma Tarihi
  updatedAt    DateTime  @updatedAt       // Güncellenme Tarihi

  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  Branch    Branch?     @relation(fields: [branchCode], references: [branchCode])

}

model StockCardBarcode {
  id                 String               @id @default(cuid())
  stockCardId        String
  barcode            String               @unique @db.VarChar(100)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  StockCardVariation StockCardVariation[] @relation("StockCardBarcodeToStockCardVariation")
}

model StockCardCategory {
  id               String                  @id @default(cuid())
  categoryName     String                  @db.VarChar(100)
  categoryCode     String                  @unique @db.VarChar(100)
  parentCategoryId String?
  parentCategory   StockCardCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  StockCardCategory[]     @relation("CategoryHierarchy")
  CategoryItems    StockCardCategoryItem[]
}

model StockCardCategoryItem {
  id          String            @id @default(cuid())
  stockCardId String
  categoryId  String
  category    StockCardCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stockCard   StockCard         @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardTaxRate {
  id          String     @id @default(cuid())
  stockCardId String?
  taxName     String     @db.VarChar(100)
  taxRate     Decimal    @db.Decimal(5, 2)
  stockCard   StockCard? @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardAttribute {
  id            String               @id @default(cuid())
  attributeName String               @db.VarChar(100)
  values        String[]
  stockCardId   String?
  stockCard     StockCard?           @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  variations    StockCardVariation[] @relation("StockCardAttributeToStockCardVariation")
}

model StockCardVariation                  {
  id                 String  @id @default(cuid())
  stockCardId        String
  productCode        String  @db.VarChar(100)
  productName        String  @db.VarChar(150)
  invoiceName        String? @db.VarChar(150)
  shortDescription   String? @db.VarChar(150)
  description        String?
  riskQuantities     Decimal @db.Decimal(15, 4)
  hasExpirationDate  Boolean @default(false)
  allowNegativeStock Boolean @default(false)
  price              Decimal @db.Decimal(15, 4)

  stockCard StockCard @relation(fields: [stockCardId], references: [id], onDelete: Cascade)

  attributes              StockCardAttribute[]      @relation("StockCardAttributeToStockCardVariation")
  Barcodes                StockCardBarcode[]        @relation("StockCardBarcodeToStockCardVariation")
  StockCardPriceListItems StockCardPriceListItems[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model StockMovement {
  id               String             @id @default(cuid())
  productCode      String 
  warehouseCode    String
  branchCode       String
  currentCode      String?
  documentType     DocumentType?
  invoiceType      InvoiceType?
  movementType     StokManagementType
  documentNo       String?
  gcCode           String?
  type             String?
  description      String?
  quantity         Decimal?            @db.Decimal(15, 4)
  unitPrice        Decimal?            @db.Decimal(15, 4)
  totalPrice       Decimal?            @db.Decimal(15, 4)
  unitOfMeasure    String?            @db.VarChar(50)
  outWarehouseCode String?
  priceListId      String?
  createdAt        DateTime           @default(now())
  createdBy        String?
  updatedAt        DateTime?           @updatedAt
  updatedBy        String?

  stockCard    StockCard           @relation(fields: [productCode], references: [productCode])
  warehouse    Warehouse           @relation("StockMovementWarehouse", fields: [warehouseCode], references: [warehouseCode])
  branch       Branch              @relation(fields: [branchCode], references: [branchCode])
  outWarehouse Warehouse?          @relation("StockMovementOutWarehouse", fields: [outWarehouseCode], references: [warehouseCode])
  priceList    StockCardPriceList? @relation(fields: [priceListId], references: [id])
  current      Current?            @relation(fields: [currentCode], references: [currentCode])
  invoice      Invoice?            @relation(fields: [documentNo], references: [invoiceNo])
}

model Company {
  id          String   @id @default(cuid())
  companyName String   @unique @db.VarChar(100)
  companyCode String   @unique @db.VarChar(50)
  taxNumber   String   @unique @db.VarChar(50)
  taxOffice   String   @db.VarChar(50)
  address     String   @db.VarChar(250)
  countryCode String   @db.VarChar(3)
  city        String   @db.VarChar(50)
  district    String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  email       String   @db.VarChar(100)
  website     String   @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  Branch    Branch[]
  Warehouse Warehouse[]
  User      User[]
  StockCard StockCard[]

  CurrentMovement CurrentMovement[]

  Invoice Invoice[]
}

model Branch {
  id          String   @id @default(cuid())
  branchName  String   @unique @db.VarChar(100)
  branchCode  String   @unique @db.VarChar(50)
  address     String   @db.VarChar(250)
  countryCode String   @db.VarChar(3)
  city        String   @db.VarChar(50)
  district    String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  email       String   @db.VarChar(100)
  website     String   @db.VarChar(100)
  companyCode String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  company Company @relation(fields: [companyCode], references: [companyCode])

  // Relationships
  User            User[]
  Warehouse       BranchWarehouse[]  // Many-to-many relation with Warehouse via BranchWarehouse
  StockCard       StockCard[]
  StockMovement   StockMovement[]
  CurrentMovement CurrentMovement[]
  
  Invoice         Invoice[] @relation("InvoiceOutBranch")
  OutInvoice      Invoice[] @relation("InvoiceBranch")

  ProfitMargin ProfitMargin[]

  Receipt Receipt[]
}

model Warehouse {
  id            String   @id @default(cuid())
  warehouseName String   @unique @db.VarChar(100)
  warehouseCode String   @unique @db.VarChar(50)
  address       String   @db.VarChar(250)
  countryCode   String   @db.VarChar(3)
  city          String   @db.VarChar(50)
  district      String   @db.VarChar(50)
  phone         String   @db.VarChar(50)
  email         String   @db.VarChar(100)
  companyCode   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?

  company Company @relation(fields: [companyCode], references: [companyCode])

  // Relationships
  Branch         BranchWarehouse[]  // Many-to-many relation with Branch via BranchWarehouse
  User           User[]
  stockMovements StockMovement[] @relation("StockMovementWarehouse")  // Main warehouse relation
  outMovements   StockMovement[] @relation("StockMovementOutWarehouse")  // Outgoing warehouse relation

  Invoice        Invoice[]

  StockCardWarehouse StockCardWarehouse[]

  Receipt Receipt[]
}

// Many-to-Many relation between Branch and Warehouse
model BranchWarehouse {
  id         String   @id @default(cuid())
  branchId   String
  warehouseId String

  branch     Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  warehouse  Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([branchId, warehouseId]) // Prevent duplicate entries
}

model StockCardWarehouse {
  id           String    @id @default(cuid())
  stockCardId  String
  warehouseId  String

  stockCard    StockCard  @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  warehouse    Warehouse  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([stockCardId, warehouseId]) // Duplicate ilişkileri önlemek için
}

model Receipt {
  id            String    @id @default(cuid())
  receiptType   ReceiptType 
  receiptDate   DateTime  @default(now())
  documentNo    String   @db.VarChar(50)
  branchCode    String    @db.VarChar(50)
  warehouseCode String    @db.VarChar(50)
  description   String?    

  branch             Branch               @relation(fields: [branchCode], references: [branchCode])
  warehouse          Warehouse            @relation(fields: [warehouseCode], references: [warehouseCode])
  
  ReceiptDetail ReceiptDetail[]
}

model ReceiptDetail {
  id          String   @id @default(cuid())
  receiptId   String 
  productCode String
  quantity    Decimal  @db.Decimal(15, 4)
  unitPrice   Decimal  @db.Decimal(15, 4)
  totalPrice  Decimal  @db.Decimal(15, 4)
  vatRate     Decimal  @db.Decimal(5, 2)
  discount    Decimal  @db.Decimal(15, 4)
  netPrice    Decimal  @db.Decimal(15, 4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?
         
  Receipt Receipt    @relation(fields: [receiptId], references: [id])
  StockCard StockCard     @relation(fields: [productCode], references: [productCode])
} 

model Current {
  id            String    @id @default(cuid())
  currentCode   String    @unique @db.VarChar(50)
  currentName   String    @db.VarChar(100)
  currentType   String    @db.VarChar(50)
  institution   String    @db.VarChar(50)
  identityNo    String?   @db.VarChar(50)
  taxNumber     String?   @db.VarChar(50)
  taxOffice     String?   @db.VarChar(50)
  birthOfDate   DateTime
  KepAdress     String?   @db.VarChar(50)
  MersisNo      String    @db.VarChar(50)
  accounts      String?   
  works         String? 
  plasiyer      String?
  address       String?   @db.VarChar(250)
  countryCode   String?   @db.VarChar(3)
  city          String?   @db.VarChar(50)
  district      String?   @db.VarChar(50)
  phone         String?   @db.VarChar(50)
  email         String?   @db.VarChar(100)
  website       String?   @db.VarChar(100)
  companyCode   String    @db.VarChar(50)
  branchCode    String    @db.VarChar(50)
  warehouseCode String    @db.VarChar(50)
  priceListId   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?

  priceList          StockCardPriceList   @relation(fields: [priceListId], references: [id])
  CurrentReportGroup CurrentReportGroup[]

  StockMovement StockMovement[]
  CurrentMovement CurrentMovement[]
  Invoice Invoice[]
  CurrentCategoryItem CurrentCategoryItem[]
}

model CurrentMovement {
  id            String                      @id @default(cuid())
  currentCode   String?                      @db.VarChar(50)
  dueDate       DateTime?
  description   String?                      @db.VarChar(250)
  debtAmount    Decimal?                     @db.Decimal(15, 4)
  creditAmount  Decimal?                     @db.Decimal(15, 4)
  balanceAmount Decimal?                     @db.Decimal(15, 4)
  priceListId   String?
  movementType  CurrentMovementType
  documentType  CurrentMovementDocumentType?
  documentNo    String?
  companyCode   String
  branchCode    String
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  createdBy     String?
  updatedBy     String?

  company            Company             @relation(fields: [companyCode], references: [companyCode])
  branch             Branch              @relation(fields: [branchCode], references: [branchCode])
  StockCardPriceList StockCardPriceList? @relation(fields: [priceListId], references: [id])
  current            Current?             @relation(fields: [currentCode], references: [currentCode])
  invoice            Invoice?            @relation(fields: [documentNo], references: [invoiceNo])
}

model CurrentCategory {
  id               String                  @id @default(cuid())
  categoryName     String                  @db.VarChar(100)
  categoryCode     String                  @unique @db.VarChar(100)
  parentCategoryId String?
  parentCategory   CurrentCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  CurrentCategory[]     @relation("CategoryHierarchy")
  CategoryItems    CurrentCategoryItem[]
}

model CurrentCategoryItem {
  id          String            @id @default(cuid())
  currentId String
  categoryId  String
  category    CurrentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  current   Current         @relation(fields: [currentId], references: [id], onDelete: Cascade)
}

model CurrentReportGroup {
  id            String               @id @default(cuid())
  groupCode     String               @unique @db.VarChar(100)
  description   String               @db.VarChar(100)
  parentGroupId String?
  parentGroup   CurrentReportGroup?  @relation("GroupHierarchy", fields: [parentGroupId], references: [id])
  childGroups   CurrentReportGroup[] @relation("GroupHierarchy")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  createdBy     String?
  updatedBy     String?

  Current Current[]
}

model Banks {
  id       String          @id @default(cuid())
  iban     String          @unique @db.VarChar(100)
  bankName String          @db.VarChar(50)
  bankBranchName   String  @db.VarChar(50)
  bankBranchCode   String  @db.VarChar(50)
  accountNo     Decimal?   @db.Decimal(15, 4)
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique @db.VarChar(50)
  password    String   @db.VarChar(100)
  email       String   @unique @db.VarChar(100)
  firstName   String   @db.VarChar(50)
  lastName    String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  address     String   @db.VarChar(250)
  isActive    Boolean  @default(true)
  companyCode String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  company Company @relation(fields: [companyCode], references: [companyCode])

  Branch    Branch[]
  Warehouse Warehouse[]
  Role      Role[]
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceNo     String    @unique @db.VarChar(50)
  gibInvoiceNo  String?
  invoiceDate   DateTime?
  invoiceType   InvoiceType?
  documentType  DocumentType?
  currentCode   String?
  companyCode   String?
  branchCode    String
  outBranchCode String?
  warehouseCode String
  description   String?
  genelIskontoTutar Decimal? @db.Decimal(15, 4)
  genelIskontoOran Decimal? @db.Decimal(5, 2)
  paymentDate   DateTime?  
  paymentDay    Int?
  priceListId   String?
  totalAmount   Decimal?   @db.Decimal(15, 4)
  totalVat      Decimal?   @db.Decimal(15, 4)
  totalDiscount Decimal?   @db.Decimal(15, 4)
  totalNet      Decimal?   @db.Decimal(15, 4)
  totalPaid     Decimal?   @db.Decimal(15, 4)
  totalDebt     Decimal?   @db.Decimal(15, 4)
  totalBalance  Decimal?   @db.Decimal(15, 4)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  canceledAt   DateTime?
  createdBy     String?
  updatedBy     String?

  Current Current? @relation(fields: [currentCode], references: [currentCode])
  company Company? @relation(fields: [companyCode], references: [companyCode])
  branch  Branch  @relation("InvoiceBranch", fields: [branchCode], references: [branchCode])
  warehouse Warehouse? @relation(fields: [warehouseCode], references: [warehouseCode])
  priceList StockCardPriceList? @relation(fields: [priceListId], references: [id])
  outBranch Branch? @relation("InvoiceOutBranch", fields: [outBranchCode], references: [branchCode])

  InvoiceDetail InvoiceDetail[]
  StockMovement StockMovement[]
  CurrentMovement CurrentMovement[]

}

model InvoiceDetail{
  id          String   @id @default(cuid())
  invoiceId   String
  productCode String
  quantity    Decimal  @db.Decimal(15, 4)
  unitPrice   Decimal  @db.Decimal(15, 4)
  totalPrice  Decimal  @db.Decimal(15, 4)
  vatRate     Decimal  @db.Decimal(5, 2)
  discount    Decimal  @db.Decimal(15, 4)
  netPrice    Decimal  @db.Decimal(15, 4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  Invoice Invoice @relation(fields: [invoiceId], references: [id])
  StockCard StockCard @relation(fields: [productCode], references: [productCode])
}
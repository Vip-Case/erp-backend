generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AddressType {
  Fatura
  Sevk
  Teslimat
}

enum InvoiceType {
  Purchase
  Sales
  Return
  Cancel
  Other
}

enum DocumentType {
  Invoice
  Order
  Waybill
  Other
}

enum StokManagementType {
  Devir
  DepolarArasiTransfer
  Uretim
  Muhtelif
  Maliyet
  Konsinye
  Teshir
}

enum CurrentMovementType {
  Borc
  Alacak
}

enum CurrentMovementDocumentType {
  Devir
  Fatura
  IadeFatura
  Kasa
  MusteriSeneti
  BorcSeneti
  MusteriCeki
  BorcCeki
  KarsiliksizCek
  Muhtelif
}

enum ReceiptType {
  Devir
  Sayim
  Nakil
  Giris
  Cikis
  Fire
}

enum StockUnits {
  Adet
  Kg
  Lt
  M
  M2
  M3
  Paket
  Kutu
  Koli
  Ton
  Dolar
  Euro
  TL
}

enum ProductType {
  BasitUrun
  VaryasyonluUrun
  DijitalUrun
  Hizmet
}

enum InstitutionType {
  Sirket
  Sahis
}

enum CurrentType {
  AliciSatici
  Alici
  Satici
  Personel
  SanalPazar
  Kurum
  AnaGrupSirketi
  Ithalat
  Ihracat
  IthalatIhracat
  Musteri
  Tedarikci
  Diger
}

enum VaultDirection {
  Introduction //Giriş
  Exit //Çıkış
  ReceivedVirement //Alınan virman
}

enum VaultType {
  DebtTransfer //borç devri
  ServiceChargeCollection //hizmet masraf tahsilatı
  CompanyCreditCardWithdrawals //firma kredi kartından para çekme
  BuyingForeignCurrency //döviz alma
  InputReceipt //giriş fişi
  BankWithdrawals //bankadan para çekme
  ReceivingValuableAssets //değerli kıymet alma
  ReceivableTransfer //Alacak Devri
  ServiceChargePayment //Hizmet Masraf Ödemesi
  CompanyCreditCardDeposit //Firma Kredi Kartına Para Yatırma
  CurrencyExchange //Döviz Bozdurma
  LoanPayment //Kredi Ödemesi
  ExitReceipt //Çıkış Fişi
  PaymentToBank //Bankaya Ödeme
  PreciousMetalExchange //Değerli Kıymet Bozdurma
}

enum VaultDocumentType {
  General //Genel
  Accounting //Muhasebe
  Official //Resmi
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  roleName    String       @unique
  description String?
  users       User[]
  permissions Permission[]
}

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  roles       Role[]
}

model StockCard {
  id                 String      @id @default(cuid())
  productCode        String      @unique @db.VarChar(100)
  productName        String      @db.VarChar(150)
  unit               StockUnits  @default(Adet)
  shortDescription   String?     @db.VarChar(150)
  description        String?     @db.VarChar(250)
  companyCode        String?     @db.VarChar(50)
  branchCode         String?     @db.VarChar(50)
  brandId            String?     @db.VarChar(100)
  productType        ProductType @default(BasitUrun)
  gtip               String?     @db.VarChar(50)
  pluCode            String?     @db.VarChar(50)
  desi               Decimal?    @db.Decimal(15, 4)
  adetBoleni         Decimal?    @db.Decimal(15, 4)
  siraNo             String?     @db.VarChar(50)
  raf                String?     @db.VarChar(50)
  karMarji           Decimal?    @db.Decimal(15, 4)
  riskQuantities     Decimal?    @db.Decimal(15, 4)
  maliyet            Decimal?    @db.Decimal(15, 4)
  maliyetDoviz       String?     @db.VarChar(3)
  stockStatus        Boolean     @default(true)
  hasExpirationDate  Boolean     @default(false)
  allowNegativeStock Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  createdBy          String?
  updatedBy          String?

  company Company? @relation(fields: [companyCode], references: [companyCode])
  branch  Branch?  @relation(fields: [branchCode], references: [branchCode])
  brand   Brand?   @relation(fields: [brandId], references: [id])

  barcodes                StockCardBarcode[]
  stockCardCategoryItem   StockCardCategoryItem[]
  stockCardPriceLists     StockCardPriceListItems[]
  taxRates                StockCardTaxRate[]
  variations              StockCardVariation[]
  stockMovement           StockMovement[]
  invoiceDetail           InvoiceDetail[]
  stockCardWarehouse      StockCardWarehouse[]
  receiptDetail           ReceiptDetail[]
  stockCardEFatura        StockCardEFatura[]
  stockCardManufacturer   StockCardManufacturer[]
  stockCardAttributeItems StockCardAttributeItems[]
  stockCardMarketNames    StockCardMarketNames[]
}

model StockCardEFatura {
  id          String   @id @default(cuid())
  productCode String   @unique @db.VarChar(100)
  productName String   @db.VarChar(150)
  stockCardId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  stockCard StockCard @relation(fields: [stockCardId], references: [id])
}

model StockCardManufacturer {
  id          String   @id @default(cuid())
  productCode String   @db.VarChar(100)
  productName String   @db.VarChar(150)
  barcode     String   @unique @db.VarChar(100)
  brandId     String?  @db.VarChar(100)
  stockCardId String
  currentId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  stockCard StockCard @relation(fields: [stockCardId], references: [id])
  current   Current   @relation(fields: [currentId], references: [id])
  brand     Brand?    @relation(fields: [brandId], references: [id])
}

model Brand {
  id        String   @id @default(cuid())
  brandName String   @unique @db.VarChar(100)
  brandCode String   @unique @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  updatedBy String?

  stockCardManufacturer StockCardManufacturer[]
  stockCard             StockCard[]
}

model StockCardPriceList {
  id            String  @id @default(cuid())
  priceListName String  @unique @db.VarChar(100)
  currency      String  @db.VarChar(3)
  isVatIncluded Boolean @default(true)
  isActive      Boolean @default(true)

  current                 Current[]
  stockMovement           StockMovement[]
  currentMovement         CurrentMovement[]
  invoice                 Invoice[]
  stockCardPriceListItems StockCardPriceListItems[]
}

model StockCardPriceListItems {
  id          String   @id @default(cuid())
  priceListId String
  stockCardId String
  price       Decimal  @db.Decimal(15, 4)
  vatRate     Decimal? @db.Decimal(15, 4)
  barcode     String?  @db.VarChar(100)

  stockCard StockCard          @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  priceList StockCardPriceList @relation(fields: [priceListId], references: [id], onDelete: Cascade)

  stockCardVariation StockCardVariation[] @relation("StockCardPriceListItemsToStockCardVariation")
}

model StockCardBarcode {
  id                 String               @id @default(cuid())
  stockCardId        String
  barcode            String               @unique @db.VarChar(100)
  stockCard          StockCard            @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  stockCardVariation StockCardVariation[] @relation("StockCardBarcodeToStockCardVariation")
}

model StockCardMarketNames {
  id          String @id @default(cuid())
  stockCardId String
  marketName  String @db.VarChar(100)

  stockCard StockCard @relation(fields: [stockCardId], references: [id])
}

model StockCardCategory {
  id               String                  @id @default(cuid())
  categoryName     String                  @unique @db.VarChar(100)
  categoryCode     String                  @unique @db.VarChar(100)
  parentCategoryId String?
  parentCategory   StockCardCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  StockCardCategory[]     @relation("CategoryHierarchy")
  categoryItems    StockCardCategoryItem[]
}

model StockCardCategoryItem {
  id                String            @id @default(cuid())
  stockCardId       String
  categoryId        String
  stockCardCategory StockCardCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stockCard         StockCard         @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardTaxRate {
  id          String     @id @default(cuid())
  stockCardId String?
  taxName     String     @db.VarChar(100)
  taxRate     Decimal    @db.Decimal(15, 4)
  stockCard   StockCard? @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
}

model StockCardAttribute {
  id            String @id @default(cuid())
  attributeName String @db.VarChar(100)
  value         String

  stockCardAttributeItems StockCardAttributeItems[]
}

model StockCardAttributeItems {
  id          String @id @default(cuid())
  attributeId String
  stockCardId String

  attribute StockCardAttribute @relation(fields: [attributeId], references: [id])
  stockCard StockCard          @relation(fields: [stockCardId], references: [id])
}

model StockCardVariation {
  id             String @id @default(cuid())
  stockCardId    String
  variationName  String @db.VarChar(100)
  variationCode  String @unique @db.VarChar(100)
  variationValue String @db.VarChar(100)

  stockCard               StockCard                 @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  stockCardPriceListItems StockCardPriceListItems[] @relation("StockCardPriceListItemsToStockCardVariation")
  stockCardBarcode        StockCardBarcode[]        @relation("StockCardBarcodeToStockCardVariation")
}

model StockMovement {
  id               String             @id @default(cuid())
  productCode      String
  warehouseCode    String
  branchCode       String
  currentCode      String?
  documentType     DocumentType?
  invoiceType      InvoiceType?
  movementType     StokManagementType
  documentNo       String?
  gcCode           String?
  type             String?
  description      String?
  quantity         Decimal?           @db.Decimal(15, 4)
  unitPrice        Decimal?           @db.Decimal(15, 4)
  totalPrice       Decimal?           @db.Decimal(15, 4)
  unitOfMeasure    String?            @db.VarChar(50)
  outWarehouseCode String?
  priceListId      String?
  createdAt        DateTime           @default(now())
  createdBy        String?
  updatedAt        DateTime?          @updatedAt
  updatedBy        String?

  stockCard    StockCard           @relation(fields: [productCode], references: [productCode])
  warehouse    Warehouse           @relation("StockMovementWarehouse", fields: [warehouseCode], references: [warehouseCode])
  branch       Branch              @relation(fields: [branchCode], references: [branchCode])
  outWarehouse Warehouse?          @relation("StockMovementOutWarehouse", fields: [outWarehouseCode], references: [warehouseCode])
  priceList    StockCardPriceList? @relation(fields: [priceListId], references: [id])
  current      Current?            @relation(fields: [currentCode], references: [currentCode])
  invoice      Invoice?            @relation(fields: [documentNo], references: [invoiceNo])
}

model Company {
  id          String   @id @default(cuid())
  companyName String   @unique @db.VarChar(100)
  name        String?  @db.VarChar(100)
  surname     String?  @db.VarChar(100)
  companyCode String?  @unique @db.VarChar(50)
  taxNumber   String?  @unique @db.VarChar(50)
  taxOffice   String?  @db.VarChar(50)
  kepAddress  String?  @db.VarChar(50)
  mersisNo    String?  @db.VarChar(50)
  sicilNo     String?  @db.VarChar(50)
  address     String?  @db.VarChar(300)
  countryCode String?  @db.VarChar(3)
  city        String?  @db.VarChar(50)
  district    String?  @db.VarChar(50)
  postalCode  String?  @db.VarChar(10)
  phone       String?  @db.VarChar(50)
  email       String?  @db.VarChar(100)
  website     String?  @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  branch          Branch[]
  warehouse       Warehouse[]
  stockCard       StockCard[]
  currentMovement CurrentMovement[]
  invoice         Invoice[]
}

model Branch {
  id          String   @id @default(cuid())
  branchName  String   @unique @db.VarChar(100)
  branchCode  String   @unique @db.VarChar(50)
  address     String   @db.VarChar(250)
  countryCode String   @db.VarChar(3)
  city        String   @db.VarChar(50)
  district    String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  email       String   @db.VarChar(100)
  website     String   @db.VarChar(100)
  companyCode String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  company Company @relation(fields: [companyCode], references: [companyCode])

  warehouse       BranchWarehouse[]
  stockCard       StockCard[]
  stockMovement   StockMovement[]
  currentMovement CurrentMovement[]

  invoice       Invoice[]       @relation("InvoiceOutBranch")
  outInvoice    Invoice[]       @relation("InvoiceBranch")
  receipt       Receipt[]
  currentBranch CurrentBranch[]
  vault         Vault[]
}

model Warehouse {
  id            String   @id @default(cuid())
  warehouseName String   @unique @db.VarChar(100)
  warehouseCode String   @unique @db.VarChar(50)
  address       String   @db.VarChar(250)
  countryCode   String   @db.VarChar(3)
  city          String   @db.VarChar(50)
  district      String   @db.VarChar(50)
  phone         String   @db.VarChar(50)
  email         String   @db.VarChar(100)
  companyCode   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     String?
  updatedBy     String?

  company Company @relation(fields: [companyCode], references: [companyCode])

  branch         BranchWarehouse[]
  stockMovements StockMovement[]   @relation("StockMovementWarehouse")
  outMovements   StockMovement[]   @relation("StockMovementOutWarehouse")

  invoice            Invoice[]
  stockCardWarehouse StockCardWarehouse[]

  receipt    Receipt[] @relation("ReceiptWarehouse")
  outReceipt Receipt[] @relation("ReceiptOutWarehouse")
  inReceipt  Receipt[] @relation("ReceiptInWarehouse")
}

model BranchWarehouse {
  id          String @id @default(cuid())
  branchId    String
  warehouseId String

  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([branchId, warehouseId])
}

model StockCardWarehouse {
  id          String  @id @default(cuid())
  stockCardId String
  warehouseId String
  quantity    Decimal @db.Decimal(15, 4)

  stockCard StockCard @relation(fields: [stockCardId], references: [id], onDelete: Cascade)
  warehouse Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([stockCardId, warehouseId])
}

model Receipt {
  id            String      @id @default(cuid())
  receiptType   ReceiptType
  receiptDate   DateTime    @default(now())
  documentNo    String      @db.VarChar(50)
  branchCode    String      @db.VarChar(50)
  warehouseCode String      @db.VarChar(50)
  isTransfer    Boolean     @default(false)
  outWarehouse  String?
  inWarehouse   String?
  description   String?

  branch              Branch          @relation(fields: [branchCode], references: [branchCode])
  warehouse           Warehouse?      @relation("ReceiptWarehouse", fields: [warehouseCode], references: [warehouseCode])
  outReceiptWarehouse Warehouse?      @relation("ReceiptOutWarehouse", fields: [outWarehouse], references: [warehouseCode])
  inReceiptWarehouse  Warehouse?      @relation("ReceiptInWarehouse", fields: [inWarehouse], references: [warehouseCode])
  receiptDetail       ReceiptDetail[]

  vaultMovement VaultMovement[]
}

model ReceiptDetail {
  id          String   @id @default(cuid())
  receiptId   String
  stockCardId String
  quantity    Decimal  @db.Decimal(15, 4)
  unitPrice   Decimal  @db.Decimal(15, 4)
  totalPrice  Decimal  @db.Decimal(15, 4)
  vatRate     Decimal  @db.Decimal(15, 4)
  discount    Decimal  @db.Decimal(15, 4)
  netPrice    Decimal  @db.Decimal(15, 4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  receipt   Receipt   @relation(fields: [receiptId], references: [id])
  stockCard StockCard @relation(fields: [stockCardId], references: [id])
}

model Current {
  id          String          @id @default(cuid())
  currentCode String          @unique @db.VarChar(50)
  currentName String          @db.VarChar(100)
  currentType CurrentType     @default(AliciSatici)
  institution InstitutionType @default(Sahis)
  identityNo  String?         @db.VarChar(50)
  taxNumber   String?         @db.VarChar(50)
  taxOffice   String?         @db.VarChar(50)
  title       String?         @db.VarChar(100)
  name        String?         @db.VarChar(50)
  surname     String?         @db.VarChar(50)
  webSite     String?         @db.VarChar(100)
  birthOfDate DateTime?
  kepAddress  String?         @db.VarChar(50)
  mersisNo    String?         @db.VarChar(50)
  sicilNo     String?         @db.VarChar(50)
  priceListId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String?
  updatedBy   String?

  priceList StockCardPriceList @relation(fields: [priceListId], references: [id])

  stockMovement         StockMovement[]
  currentMovement       CurrentMovement[]
  invoice               Invoice[]
  currentCategoryItem   CurrentCategoryItem[]
  stockCardManufacturer StockCardManufacturer[]
  currentAddress        CurrentAddress[]
  currentFinancial      CurrentFinancial[]
  currentRisk           CurrentRisk[]
  currentOfficials      CurrentOfficials[]
  currentBranch         CurrentBranch[]
}

model CurrentBranch {
  id          String   @id @default(cuid())
  currentCode String   @db.VarChar(50)
  branchCode  String   @db.VarChar(50)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  current Current @relation(fields: [currentCode], references: [currentCode])
  branch  Branch  @relation(fields: [branchCode], references: [branchCode])
}

model CurrentAddress {
  id          String      @id @default(cuid())
  currentCode String      @db.VarChar(50)
  addressName String      @db.VarChar(50)
  addressType AddressType @default(Fatura)
  address     String      @db.VarChar(250)
  countryCode String      @db.VarChar(3)
  city        String      @db.VarChar(50)
  district    String      @db.VarChar(50)
  postalCode  String      @db.VarChar(10)
  phone       String      @db.VarChar(50)
  phone2      String      @db.VarChar(50)
  email       String      @db.VarChar(100)
  email2      String      @db.VarChar(100)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String?
  updatedBy   String?

  current Current @relation(fields: [currentCode], references: [currentCode])
}

model CurrentFinancial {
  id             String   @id @default(cuid())
  currentCode    String   @db.VarChar(50)
  bankName       String   @db.VarChar(50)
  bankBranch     String   @db.VarChar(50)
  bankBranchCode String   @db.VarChar(50)
  iban           String   @db.VarChar(100)
  accountNo      Decimal? @db.Decimal(15, 4)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  createdBy      String?
  updatedBy      String?

  current Current @relation(fields: [currentCode], references: [currentCode])
}

model CurrentRisk {
  id                       String   @id @default(cuid())
  currentCode              String   @unique @db.VarChar(50)
  currency                 String   @db.VarChar(3)
  teminatYerelTutar        Decimal? @db.Decimal(15, 4)
  acikHesapYerelLimit      Decimal? @db.Decimal(15, 4)
  hesapKesimGunu           Int?
  vadeGun                  Int?
  gecikmeLimitGunu         Int?
  varsayilanAlisIskontosu  Decimal? @db.Decimal(15, 4)
  varsayilanSatisIskontosu Decimal? @db.Decimal(15, 4)
  ekstreGonder             Boolean? @default(false)
  limitKontrol             Boolean? @default(false)
  acikHesap                Boolean? @default(false)
  posKullanim              Boolean? @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  createdBy                String?
  updatedBy                String?

  current Current @relation(fields: [currentCode], references: [currentCode])
}

model CurrentOfficials {
  id          String   @id @default(cuid())
  currentCode String   @db.VarChar(50)
  title       String   @db.VarChar(100)
  name        String   @db.VarChar(50)
  surname     String   @db.VarChar(50)
  phone       String   @db.VarChar(50)
  email       String   @db.VarChar(100)
  note        String   @db.VarChar(250)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  current Current @relation(fields: [currentCode], references: [currentCode])
}

model CurrentMovement {
  id            String                       @id @default(cuid())
  currentCode   String?                      @db.VarChar(50)
  dueDate       DateTime?
  description   String?                      @db.VarChar(250)
  debtAmount    Decimal?                     @db.Decimal(15, 4)
  creditAmount  Decimal?                     @db.Decimal(15, 4)
  balanceAmount Decimal?                     @db.Decimal(15, 4)
  priceListId   String?
  movementType  CurrentMovementType
  documentType  CurrentMovementDocumentType?
  documentNo    String?
  companyCode   String
  branchCode    String
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  createdBy     String?
  updatedBy     String?

  company            Company             @relation(fields: [companyCode], references: [companyCode])
  branch             Branch              @relation(fields: [branchCode], references: [branchCode])
  stockCardPriceList StockCardPriceList? @relation(fields: [priceListId], references: [id])
  current            Current?            @relation(fields: [currentCode], references: [currentCode])
  invoice            Invoice?            @relation(fields: [documentNo], references: [invoiceNo])
}

model CurrentCategory {
  id               String                @id @default(cuid())
  categoryName     String                @db.VarChar(100)
  categoryCode     String                @unique @db.VarChar(100)
  parentCategoryId String?
  parentCategory   CurrentCategory?      @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories  CurrentCategory[]     @relation("CategoryHierarchy")
  categoryItems    CurrentCategoryItem[]
}

model CurrentCategoryItem {
  id          String          @id @default(cuid())
  currentCode String          @db.VarChar(50)
  categoryId  String
  category    CurrentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  current     Current         @relation(fields: [currentCode], references: [currentCode], onDelete: Cascade)
}

model Invoice {
  id                String        @id @default(cuid())
  invoiceNo         String        @unique @db.VarChar(50)
  gibInvoiceNo      String?
  invoiceDate       DateTime?
  invoiceType       InvoiceType?
  documentType      DocumentType?
  currentCode       String?
  companyCode       String?
  branchCode        String
  outBranchCode     String?
  warehouseCode     String
  description       String?
  genelIskontoTutar Decimal?      @db.Decimal(15, 4)
  genelIskontoOran  Decimal?      @db.Decimal(15, 4)
  paymentDate       DateTime?
  paymentDay        Int?
  priceListId       String?
  totalAmount       Decimal?      @db.Decimal(15, 4)
  totalVat          Decimal?      @db.Decimal(15, 4)
  totalDiscount     Decimal?      @db.Decimal(15, 4)
  totalNet          Decimal?      @db.Decimal(15, 4)
  totalPaid         Decimal?      @db.Decimal(15, 4)
  totalDebt         Decimal?      @db.Decimal(15, 4)
  totalBalance      Decimal?      @db.Decimal(15, 4)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  canceledAt        DateTime?
  createdBy         String?
  updatedBy         String?

  current   Current?            @relation(fields: [currentCode], references: [currentCode])
  company   Company?            @relation(fields: [companyCode], references: [companyCode])
  branch    Branch              @relation("InvoiceBranch", fields: [branchCode], references: [branchCode])
  warehouse Warehouse?          @relation(fields: [warehouseCode], references: [warehouseCode])
  priceList StockCardPriceList? @relation(fields: [priceListId], references: [id])
  outBranch Branch?             @relation("InvoiceOutBranch", fields: [outBranchCode], references: [branchCode])

  invoiceDetail   InvoiceDetail[]
  stockMovement   StockMovement[]
  currentMovement CurrentMovement[]

  vaultMovement VaultMovement[]
}

model InvoiceDetail {
  id          String   @id @default(cuid())
  invoiceId   String
  productCode String
  quantity    Decimal  @db.Decimal(15, 4)
  unitPrice   Decimal  @db.Decimal(15, 4)
  totalPrice  Decimal  @db.Decimal(15, 4)
  vatRate     Decimal  @db.Decimal(15, 4)
  discount    Decimal  @db.Decimal(15, 4)
  netPrice    Decimal  @db.Decimal(15, 4)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  updatedBy   String?

  invoice   Invoice   @relation(fields: [invoiceId], references: [id])
  stockCard StockCard @relation(fields: [productCode], references: [productCode])
}

model Vault {
  id         String  @id @default(cuid())
  vaultName  String  @db.VarChar(50)
  branchCode String
  balance    Decimal @db.Decimal(15, 2)
  currency   Decimal @db.Decimal(10, 6)

  branch Branch @relation(fields: [branchCode], references: [branchCode])

  vaultMovement VaultMovement[]
}

model VaultMovement {
  id                String            @id @default(cuid())
  vaultId           String
  invoiceId         String
  receiptId         String
  description       String
  entering          Decimal           @db.Decimal(15, 2)
  emerging          Decimal           @db.Decimal(15, 2)
  vaultDirection    VaultDirection
  vaultType         VaultType
  vaultDocumentType VaultDocumentType

  vault   Vault   @relation(fields: [vaultId], references: [id])
  invoice Invoice @relation(fields: [invoiceId], references: [id])
  receipt Receipt @relation(fields: [receiptId], references: [id])
}

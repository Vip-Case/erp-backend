name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: novent-erp-api
  AZURE_RESOURCE_GROUP: novent-erp-rg
  ACR_NAME: noventacr
  CONTAINER_IMAGE_NAME: erp-api
  NODE_VERSION: "20"
  POSTGRES_SERVER_NAME: novent-postgres
  POSTGRES_DB_NAME: erp_db
  POSTGRES_ADMIN: noventadmin

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Lint code
        run: npm run lint || echo "Linting issues found"

      - name: Run tests
        run: npm test || echo "Tests failed"

      - name: Notify Slack on Test Completion
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Test Results"
          SLACK_MESSAGE: "Build and Test job completed with status: ${{ job.status }}"
          SLACK_FOOTER: "Novent ERP CI/CD Pipeline"

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR Credentials
        id: get-acr-credentials
        run: |
          ACR_USERNAME=$(az acr credential show --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name ${{ env.ACR_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query passwords[0].value -o tsv)
          echo "::set-output name=username::$ACR_USERNAME"
          echo "::set-output name=password::$ACR_PASSWORD"
          # GitHub Actions yeni sözdizimi için
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Log in to ACR with Docker
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_NAME }}.azurecr.io
          username: ${{ steps.get-acr-credentials.outputs.username }}
          password: ${{ steps.get-acr-credentials.outputs.password }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }},${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_IMAGE_NAME }}:latest
          cache-to: type=inline

      - name: Notify Slack on Image Build
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Docker Image Build"
          SLACK_MESSAGE: "Docker image build and push completed with status: ${{ job.status }}"
          SLACK_FOOTER: "Novent ERP CI/CD Pipeline"

  backup-database:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Backup Timestamp
        id: backup-timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Check Automatic Backups
        run: |
          echo "Checking PostgreSQL database automatic backups before deployment..."

          # Burstable tier sunucularda manuel yedekleme desteklenmediği için otomatik yedekleri kullanıyoruz
          echo "NOTE: Manual on-demand backups are not supported on Burstable tier PostgreSQL servers."
          echo "The system is using automatic daily backups provided by Azure PostgreSQL Flexible Server."
          echo "These backups are retained according to the configured backup retention period (default: 7 days)."

          # PostgreSQL sunucusunun yedekleme bilgilerini kontrol et
          echo "Checking backup configuration for PostgreSQL server..."
          az postgres flexible-server show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.POSTGRES_SERVER_NAME }} \
            --query "backup"

          # Yedekleme bilgilerini kaydet
          echo "BACKUP_TIMESTAMP=${{ steps.backup-timestamp.outputs.timestamp }}" >> $GITHUB_ENV
          echo "BACKUP_INFO=Automatic backups are used (Burstable tier)" >> $GITHUB_ENV

      - name: Notify Slack on Database Backup
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Database Backup"
          SLACK_MESSAGE: "Pre-deployment database backup check completed with status: ${{ job.status }}. Using automatic backups (Burstable tier)."
          SLACK_FOOTER: "Novent ERP CI/CD Pipeline"

  deploy:
    needs: backup-database
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_IMAGE_NAME }}:${{ github.sha }}

      - name: Run database migrations
        run: |
          echo "Running database migrations..."

          # App Service'de Prisma migrasyonlarını çalıştırmak için Kudu REST API kullanıyoruz
          # Önce publishing credentials alıyoruz
          echo "Getting publishing credentials..."
          PUBLISH_PROFILE_PASSWORD=$(az webapp deployment list-publishing-profiles --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --query "[?publishMethod=='MSDeploy'].userPWD" -o tsv)

          # Kudu REST API ile komut çalıştırıyoruz
          echo "Running Prisma migrations via Kudu REST API..."
          curl -X POST -u "${{ env.AZURE_WEBAPP_NAME }}:$PUBLISH_PROFILE_PASSWORD" \
            "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/command" \
            -d "{'command': 'cd /home/site/wwwroot && npx prisma migrate deploy'}" \
            -H "Content-Type: application/json"

          # Migrasyonların tamamlanması için biraz bekliyoruz
          echo "Waiting for migrations to complete..."
          sleep 10

      - name: Purge Redis Cache
        run: |
          echo "Purging Redis Cache..."
          # Redis önbelleğini temizliyoruz
          az redis command invoke --command "FLUSHALL" --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name novent-redis

          # Redis önbelleğinin temizlenmesi için biraz bekliyoruz
          echo "Waiting for Redis cache to be purged..."
          sleep 5

      - name: Restart App Service
        run: |
          echo "Restarting App Service..."
          # App Service'i yeniden başlatıyoruz
          az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

          # App Service'in yeniden başlaması için biraz bekliyoruz
          echo "Waiting for App Service to restart..."
          sleep 20

      - name: Post-deployment health check
        run: |
          echo "Checking application health..."
          # Uygulamanın sağlık durumunu kontrol ediyoruz
          # 5 saniye bekleyip sağlık kontrolü yapıyoruz
          sleep 5
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health)
          if [ "$response" != "200" ]; then
            echo "Health check failed with status code: $response"
            exit 1
          else
            echo "Health check passed with status code: $response"
          fi

      - name: Notify Slack on Deployment
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: "Deployment Status"
          SLACK_MESSAGE: "Deployment completed with status: ${{ job.status }}. Application health check: ${{ job.status == 'success' && 'Passed' || 'Failed' }}"
          SLACK_FOOTER: "Novent ERP CI/CD Pipeline"

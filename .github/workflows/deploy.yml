name: Deploy Backend

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  DOCKER_IMAGE: erp-backend
  DOCKER_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd /var/www/erp-backend/

            # Yedek al
            docker-compose ps -q > running_containers.txt

            # PostgreSQL yedeğini al
            BACKUP_DATE=$(date +%Y-%m-%d_%H-%M-%S)
            BACKUP_FILE="erp_db_backup_${BACKUP_DATE}.sql"

            echo "PostgreSQL yedeği alınıyor..."
            docker-compose exec -T postgres pg_dump -U postgres erp_db > "/tmp/${BACKUP_FILE}"

            # Yedeği sıkıştır
            gzip "/tmp/${BACKUP_FILE}"

            # Yedeği AWS S3'e yükle
            aws s3 cp "/tmp/${BACKUP_FILE}.gz" "s3://${{ secrets.AWS_BACKUP_BUCKET }}/pre-deploy-backups/${BACKUP_FILE}.gz"

            # Geçici dosyaları temizle
            rm "/tmp/${BACKUP_FILE}.gz"

            # Yeni kodu çek
            git fetch origin production
            git checkout production
            git pull origin production

            # Prisma migration kontrolü
            if ! docker-compose exec -T app bunx prisma migrate deploy; then
              echo "Migration başarısız oldu!"
              exit 1
            fi

            # Yeni containerleri başlat
            if ! docker-compose up -d --build; then
              echo "Deployment başarısız oldu!"
              # Eski containerleri geri yükle
              while read container; do
                docker start $container
              done < running_containers.txt
              exit 1
            fi

            # Health check
            for i in {1..30}; do
              if curl -f http://localhost:1303/health; then
                echo "Uygulama başarıyla deploy edildi!"
                exit 0
              fi
              sleep 2
            done

            echo "Health check başarısız oldu!"
            exit 1

      - name: Notify on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "🚀 Production ortamına deployment başarılı!"
          SLACK_COLOR: good

      - name: Notify on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "❌ Production deployment başarısız oldu!"
          SLACK_COLOR: danger

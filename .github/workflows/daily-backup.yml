name: Daily Database Backup

on:
  schedule:
    - cron: "0 1 * * *" # Her gün gece 01:00'de çalışır
  workflow_dispatch: # Manuel tetikleme için

jobs:
  backup:
    runs-on: ubuntu-22.04
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Backup to S3
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            # Yedek dizini oluştur
            mkdir -p /tmp/backups

            # Tarih formatını ayarla
            BACKUP_DATE=$(date +%Y-%m-%d_%H-%M-%S)
            BACKUP_FILE="erp_db_backup_${BACKUP_DATE}.sql"

            echo "PostgreSQL yedeği alınıyor..."
            docker-compose -f /var/www/erp-backend/docker-compose.yml exec -T postgres pg_dump -U postgres erp_db > "/tmp/backups/${BACKUP_FILE}"

            # Yedeği sıkıştır
            gzip "/tmp/backups/${BACKUP_FILE}"

            # Yedeği AWS S3'e yükle
            aws s3 cp "/tmp/backups/${BACKUP_FILE}.gz" "s3://${{ secrets.AWS_BACKUP_BUCKET }}/daily-backups/${BACKUP_FILE}.gz"

            # 7 günden eski yedekleri S3'den temizle
            aws s3 ls "s3://${{ secrets.AWS_BACKUP_BUCKET }}/daily-backups/" | while read -r line;
            do
              createDate=`echo $line|awk {'print $1" "$2'}`
              createDate=`date -d"$createDate" +%s`
              olderThan=`date -d"-7 days" +%s`
              if [[ $createDate -lt $olderThan ]]
              then
                fileName=`echo $line|awk {'print $4'}`
                if [[ $fileName != "" ]]
                then
                  aws s3 rm "s3://${{ secrets.AWS_BACKUP_BUCKET }}/daily-backups/$fileName"
                fi
              fi
            done

            # Geçici dosyaları temizle
            rm -rf /tmp/backups

      - name: Notify on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "✅ Günlük veritabanı yedeği başarıyla alındı!"
          SLACK_COLOR: good

      - name: Notify on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "❌ Günlük veritabanı yedeği alınamadı!"
          SLACK_COLOR: danger
